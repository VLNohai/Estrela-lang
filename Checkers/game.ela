requireELA('board');

local function PopulateBoard(board @Board) -> Board
    for row = 1, 8 do
        for col = 1, 8 do
            if (row + col) % 2 == 1 then
                if row <= 3 then
                    local black @BlackPiece = new BlackPiece((col as number), (row as number));
                    board = board + black;
                elseif row >= 6 then
                    local red @RedPiece = new RedPiece((col as number), (row as number));
                    board = board + red;
                end
            end
        end
    end
    return board;
end

class Score : Drawable() as
    redPlayer @number, blackPlayer @number;
    constructor() end;
    won(color @Color) 
        if (color is Red) then
            this.redPlayer = this.redPlayer + 1;
        elseif (color is Black) then
            this.blackPlayer = this.blackPlayer + 1;
        end
    end
    draw() 
        Color:setColorELA((new Black() as Color));
        love.graphics.setFont(love.graphics.newFont(12));
        love.graphics.print("Black Pieces:" .. this.blackPlayer, 12, 20);
        Color:setColorELA((new Red() as Color));
        love.graphics.print("Red Pieces:" .. this.redPlayer, 12, Math2D.screenHeight - 20 - 14);
    end;
end

class Markers : Drawable() as
    originalCache @Pair = new Pair(-1, -1);
    currentCache @Pair = new Pair(-1, -1);
    color @Color = (new Red() as Color);
    shouldDraw @string = 'none';
    points @{Pair} = {};
    road @{Pair} = {};
    constructor() end;
    draw()
        if this.shouldDraw == 'road' then
            Color:setColorELA(this.color);
            local temp @Pair = Math2D:getSquareCenter(DragAndDrop.originalPosition.first, DragAndDrop.originalPosition.second);
            local startX = temp.first
            local startY = temp.second
            local endX;
            local endY;

            if #this.road == 0 then
                temp = Math2D:getSquareCenter(DragAndDrop.currentPosition.first, DragAndDrop.currentPosition.second)
            else
                temp = Math2D:getSquareCenter(this.road[1].first, this.road[1].second)
            end
            if temp.first == -1 or temp.second == -1 then return; end;
            endX = temp.first;
            endY = temp.second;
            local index @number = 1;

            repeat
                index = index + 1;
                love.graphics.line(startX, startY, endX, endY)

                local angle = math.atan2(endY - startY, endX - startX)
                local arrowSize = 25
                local arrowPoints = {
                    endX - arrowSize * math.cos(angle - math.pi / 6), endY - arrowSize * math.sin(angle - math.pi / 6),
                    endX, endY,
                    endX - arrowSize * math.cos(angle + math.pi / 6), endY - arrowSize * math.sin(angle + math.pi / 6)
                }
                love.graphics.polygon('fill', arrowPoints)
                startX = endX;
                startY = endY;
                if this.road[index] then
                    temp = Math2D:getSquareCenter((this.road[index].first or -1), (this.road[index].second or -1))
                    endX = temp.first;
                    endY = temp.second;
                end
            until index > #this.road;


        elseif this.shouldDraw == 'points' then
            Color:setColorELA((new Green() as Color));
            for i=1, #this.points, 1 do
                local temp @Pair = Math2D:getSquareCenter(this.points[i].first, this.points[i].second);
                love.graphics.circle('fill', temp.first, temp.second, 15); 
            end
        end
    end;
end

class Background : Drawable() as
    constructor() end;
    draw()
        love.graphics.setColor(245/255, 245/255, 230/255);
        love.graphics.rectangle('fill', 0, 0, Math2D.screenWidth, Math2D.screenHeight);
        love.graphics.setColor(56 / 255, 32 / 255, 6 / 255);
        love.graphics.rectangle('fill', Math2D:getOffsetToCenterHorizontally(Math2D.screenHeight), 0, Math2D.screenHeight, Math2D.screenHeight)
    end;
end

class Game : Drawable() as
    title @string = 'Checkers';
    board @Board = new Board();
    markers @Markers = new Markers();
    score @Score = new Score();
    background @Background = new Background();
    drawables @{Drawable} = {};

    arrowColor @string = 'red';
    willMoveOnRelease @boolean = false;
    canAskForNext @boolean = true;

    constructor()
        this.board = PopulateBoard(this.board);
        this.drawables[#this.drawables+1] = (this.background as Drawable);
        this.drawables[#this.drawables+1] = (this.board as Drawable);
        this.drawables[#this.drawables+1] = (this.markers as Drawable);
        this.drawables[#this.drawables+1] = (this.score as Drawable);
    end;

    originalPosCache @Pair = new Pair(-2, -2);
    newPosCache @Pair = new Pair(-2, -2);
    roadCache @{Pair} = {};
    coroutineSave @thread;
    canMovePieceTo(piece @Piece, newx @number, newy @number) -> {Pair}
        if (new Pair(piece.x, piece.y) == this.originalPosCache) and (new Pair(newx, newy) == this.newPosCache) then
            return this.roadCache;
        end
        this.originalPosCache = new Pair(piece.x, piece.y);
        this.newPosCache = new Pair(newx, newy);
        this.roadCache = {};

        local numberTable @{{number}} = this.board:convertToNumbers();
        local co @thread = (coroutine.create(piece.Turn) as thread);
        this.coroutineSave = co;
        local result = {coroutine.resume(co, piece, numberTable, piece.x, piece.y, newx, newy)};
        if(result[2]) then
            for i=1, #result[2][6], 1 do
                this.roadCache[#this.roadCache + 1] = new Pair((result[2][6][i][1] as number), (result[2][6][i][2] as number));
            end
            return this.roadCache;
        end
        this.roadCache = {};
        return this.roadCache;
    end

    nextRoad() -> {Pair}
        local result = {coroutine.resume(this.coroutineSave)};
        if result[2] and luaType(result[2]) == 'table' then
        this.roadCache = {};
            for i=1, #result[2][6], 1 do
                this.roadCache[#this.roadCache + 1] = new Pair((result[2][6][i][1] as number), (result[2][6][i][2] as number));
            end
        end
        return this.roadCache;
    end

    allMovesCache @{Pair} = {};
    allPossibleMoves(piece @Piece) -> {Pair}
        this.roadCache = {};
        if (new Pair(piece.x, piece.y) == this.originalPosCache) then
            return this.allMovesCache;
        end
        this.originalPosCache = new Pair(piece.x, piece.y);
        this.allMovesCache = {};

        local numberTable @{{number}} = this.board:convertToNumbers();
        local co @thread = (coroutine.create(piece.Turn) as thread);
        local result = {coroutine.resume(co, piece, numberTable, piece.x, piece.y)};
        while result[2] do
            this.allMovesCache[#this.allMovesCache + 1] = new Pair((result[2][4] as number), (result[2][5] as number));
            result = {coroutine.resume(co)};
        end
        return this.allMovesCache;
    end

    takePieces(piece @Piece)
        local pieceX = piece.x;
        local pieceY = piece.y;
        for i=1, #this.markers.road, 1 do
            if math.abs(pieceX - this.markers.road[i].first) > 1 then
                local midX = (pieceX + this.markers.road[i].first)/2;
                local midY = (pieceY + this.markers.road[i].second)/2;
                if ((piece.color is Red) and (this.board.pieces.fields[midY][midX].color is Black)) or
                   ((piece.color is Black) and (this.board.pieces.fields[midY][midX].color is Red))
                then
                    this.board.pieces.fields[midY][midX] = nil;
                end
                pieceX = this.markers.road[i].first;
                pieceY = this.markers.road[i].second;
            end
        end
    end

    movePiece(piece @Piece, newx @number, newy @number)
        local func = this.takePieces;
        func(self, piece);
        this.board.pieces.fields[piece.y][piece.x] = nil;
        piece.x = newx;
        piece.y = newy;
        if (newy == 1) or (newy == 8) then
            local newCrownedPiece @CrownPiece = new CrownPiece(piece);
            this.board = this.board + newCrownedPiece;
        else
            this.board = this.board + piece;
        end
    end

    draw()
        for i=1, #this.drawables, 1 do
            this.drawables[i]:draw();
        end
    end
end