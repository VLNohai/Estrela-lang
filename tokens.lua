Tokens = {};

Tokens.TokenType = {
    IDENTIFIER  = 1,
    NUMBER_VALUE = 2,
    STRING_VALUE = 3,
    
    AND_KEYWORD = 4,
    DO_KEYWORD = 5,
    ELSE_KEYWORD = 6,
    ELSEIF_KEYWORD = 7,
    END_KEYWORD = 8,
    FALSE_KEYWORD = 9,
    FOR_KEYWORD = 10,
    FUNCTION_KEYWORD = 11,
    IF_KEYWORD = 12,
    IN_KEYWORD = 13,
    LOCAL_KEYWORD = 14,
    NIL_KEYWORD = 15,
    NOT_KEYWORD = 16,
    OR_KEYWORD = 17,
    REPEAT_KEYWORD = 18,
    RETURN_KEYWORD = 19,
    THEN_KEYWORD = 20,
    TRUE_KEYWORD = 21,
    UNTIL_KEYWORD = 22,
    WHILE_KEYWORD= 23,
    GOTO_KEYWORD= 24,

    UNARY_MINUS_OPERATOR = 25,
    PLUS_OPERATOR = 26,
    MINUS_OPERATOR = 27,
    STAR_OPERATOR = 28,
    SLASH_OPERATOR = 29,
    PERCENT_OPERATOR = 30,
    CARET_OPERATOR = 31,
    HASH_OPERATOR = 32,
    EQUALS_OPERATOR = 33,
    NOT_EQUALS_OPERATOR = 34,
    LESS_OR_EQUAL_OPERATOR = 35,
    MORE_OR_EQUAL_OPERATOR = 36,
    LESS_OPERATOR = 37,
    MORE_OPERATOR= 38,
    ASSIGN_OPERATOR = 39,
    DOUBLE_COLON_OPERATOR = 40,
    DOUBLE_SLASH_OPERATOR = 41,
    TILDE_OPERATOR = 42,

    LEFT_PARAN_MARK = 43,
    RIGHT_PARAN_MARK = 44,
    LEFT_BRACE_MARK = 45,
    RIGHT_BRACE_MARK = 46,
    LEFT_SQR_BRACKET_MARK = 47,
    RIGHT_SQR_BRACKET_MARK = 48,
    SEMICOLON_MARK = 49,
    COLON_MARK = 50,
    COMMA_MARK = 51,
    POINT_MARK = 52,
    DOUBLE_POINT_MARK = 53,
    TRIPLE_POINT_MARK = 54,

    ANY_KEYWORD = 55,
    CONSTRUCTOR_KEYWORD = 56,
    CLASS_KEYWORD = 57,
    STATIC_KEYWORD = 58,
    ABSTRACT_KEYWORD = 59,
    AS_KEYWORD = 60,
    THIS_KEYWORD = 61,
    NEW_KEYWORD = 62,
    LOGIC_KEYWORD = 63,
    UNIQUE_KEYWORD = 64,
    OPERATOR_KEYWORD = 65,
    EXPORTS_KEYWORD = 66,
    DEFAULT_KEYWORD = 67,
    IS_KEYWORD = 68,

    ARROW_OPERATOR = 69,
    AT_OPERATOR = 70,
    CONCATENATION_OPERATOR = 71,
};

Tokens.MapKeywords = {
    ['and'] = Tokens.TokenType.AND_KEYWORD,
    ['do'] = Tokens.TokenType.DO_KEYWORD,
    ['else'] = Tokens.TokenType.ELSE_KEYWORD,
    ['elseif'] = Tokens.TokenType.ELSEIF_KEYWORD,
    ['end'] = Tokens.TokenType.END_KEYWORD,
    ['false'] = Tokens.TokenType.FALSE_KEYWORD,
    ['for'] = Tokens.TokenType.FOR_KEYWORD,
    ['function'] = Tokens.TokenType.FUNCTION_KEYWORD,
    ['if'] = Tokens.TokenType.IF_KEYWORD,
    ['in'] = Tokens.TokenType.IN_KEYWORD,
    ['local'] = Tokens.TokenType.LOCAL_KEYWORD,
    ['nil'] = Tokens.TokenType.NIL_KEYWORD,
    ['not'] = Tokens.TokenType.NOT_KEYWORD ,
    ['or'] = Tokens.TokenType.OR_KEYWORD,
    ['repeat'] = Tokens.TokenType.REPEAT_KEYWORD,
    ['return'] = Tokens.TokenType.RETURN_KEYWORD,
    ['then'] = Tokens.TokenType.THEN_KEYWORD,
    ['true'] = Tokens.TokenType.TRUE_KEYWORD,
    ['until'] = Tokens.TokenType.UNTIL_KEYWORD,
    ['while'] = Tokens.TokenType.WHILE_KEYWORD,
    ['goto'] = Tokens.TokenType.GOTO_KEYWORD,
    ['any'] = Tokens.TokenType.ANY_KEYWORD,
    ['constructor'] = Tokens.TokenType.CONSTRUCTOR_KEYWORD,
    ['class'] = Tokens.TokenType.CLASS_KEYWORD,
    ['static'] = Tokens.TokenType.STATIC_KEYWORD,
    ['abstract'] = Tokens.TokenType.ABSTRACT_KEYWORD,
    ['as'] = Tokens.TokenType.AS_KEYWORD,
    ['public'] = Tokens.TokenType.PUBLIC_KEYWORD,
    ['private'] = Tokens.TokenType.PRIVATE_KEYWORD,
    ['protected'] = Tokens.TokenType.PROTECTED_KEYWORD,
    ['this'] = Tokens.TokenType.THIS_KEYWORD,
    ['new'] = Tokens.TokenType.NEW_KEYWORD,
    ['logic'] = Tokens.TokenType.LOGIC_KEYWORD,
    ['unique'] = Tokens.TokenType.UNIQUE_KEYWORD,
    ['operator'] = Tokens.TokenType.OPERATOR_KEYWORD,
    ['exports'] = Tokens.TokenType.EXPORTS_KEYWORD,
    ['default'] = Tokens.TokenType.DEFAULT_KEYWORD,
    ['is'] = Tokens.TokenType.IS_KEYWORD
}

Tokens.MapOperators = {
    ['+'] = Tokens.TokenType.PLUS_OPERATOR,
    ['-'] = Tokens.TokenType.MINUS_OPERATOR,
    ['*'] = Tokens.TokenType.STAR_OPERATOR,
    ['/'] = Tokens.TokenType.SLASH_OPERATOR,
    ['%'] = Tokens.TokenType.PERCENT_OPERATOR,
    ['^'] = Tokens.TokenType.CARET_OPERATOR,
    ['#'] = Tokens.TokenType.HASH_OPERATOR,
    ['=='] = Tokens.TokenType.EQUALS_OPERATOR,
    ['~='] = Tokens.TokenType.NOT_EQUALS_OPERATOR,
    ['<='] = Tokens.TokenType.LESS_OR_EQUAL_OPERATOR,
    ['>='] = Tokens.TokenType.MORE_OR_EQUAL_OPERATOR,
    ['<'] = Tokens.TokenType.LESS_OPERATOR,
    ['>'] = Tokens.TokenType.MORE_OPERATOR,
    ['='] = Tokens.TokenType.ASSIGN_OPERATOR,
    ['.'] = Tokens.TokenType.POINT_MARK,
    ['..'] = Tokens.TokenType.DOUBLE_POINT_MARK,
    ['...'] = Tokens.TokenType.TRIPLE_POINT_MARK,
    [':'] = Tokens.TokenType.COLON_MARK,
    ['::'] = Tokens.TokenType.DOUBLE_COLON_OPERATOR,
    ['//'] = Tokens.TokenType.DOUBLE_SLASH_OPERATOR,
    ['~'] = Tokens.TokenType.TILDE_OPERATOR,

    ['->'] = Tokens.TokenType.ARROW_OPERATOR,
    ['@'] = Tokens.TokenType.AT_OPERATOR,
    ['?'] = Tokens.TokenType.QUESTION_OPERATOR,
    ['|'] = Tokens.TokenType.CONCATENATION_OPERATOR
}

Tokens.MapMarkers = {
    ['('] = Tokens.TokenType.LEFT_PARAN_MARK,
    [')'] = Tokens.TokenType.RIGHT_PARAN_MARK,
    ['{'] = Tokens.TokenType.LEFT_BRACE_MARK,
    ['}'] = Tokens.TokenType.RIGHT_BRACE_MARK,
    ['['] = Tokens.TokenType.LEFT_SQR_BRACKET_MARK,
    [']'] = Tokens.TokenType.RIGHT_SQR_BRACKET_MARK,
    [';'] = Tokens.TokenType.SEMICOLON_MARK,
    [','] = Tokens.TokenType.COMMA_MARK,
};

Tokens.NodeType = {
    BLOCK_NODE = 1,
    STATEMENT_NODE = 2,
    SEMICOLON_NODE = 3,
    ASSIGNMENT_NODE = 4,
    LOCAL_DECLARATION_NODE = 5,
    LABEL_NODE = 6,
    BREAK_NODE = 7,
    GOTO_NODE = 8,
    DO_BLOCK_NODE = 9,
    WHILE_LOOP_NODE = 10,
    IF_NODE = 11,
    FOR_CONTOR_LOOP_NODE = 12,
    FOR_IN_LOOP_NODE = 13,
    FUNCTION_DECLARATION_NODE = 14,
    LOCAL_FUNCTION_DECLARATION_NODE = 15,
    CLASS_DECLARATION_NODE = 16,
    STATIC_CONSTRUCTOR_NODE = 17,
    CONSTRUCTOR_NODE = 18,
    MEMBER_FUNCTION_NODE = 19,
    CLASS_FIELD_DECLARATION_NODE = 20,
    VARLIST_NODE = 21,
    VAR_NODE = 22,
    NAMELIST_NODE = 23,
    NAME_NODE = 24,
    EXPLIST_NODE = 25,
    UNOP_NODE = 26,
    BINOP_NODE = 27,
    CLASS_BODY_NODE = 28,
    LAMBDA_FUNC_NODE = 30,
    VALUE_NODE = 31,
    BINEXP_NODE = 32,
    EVALUABLE_NODE = 33,
    EXP_NODE = 34,
    BRACKET_INDEX_NODE = 35,
    POINT_INDEX_NODE = 36,
    INDEX_NODE = 37,
    CALL_NODE = 38,
    ARGS_NODE = 39,
    SELF_CALL_NODE = 40,
    FUNCTION_CALL_NODE = 41,
    PARAN_EXP_NODE = 42,
    UNEXP_NODE = 43,
    INSTANTIATION_NODE = 44,
    TYPED_VAR_NODE = 45,
    LOGIC_BLOCK_NODE = 46,
    LOGIC_NAME_NODE = 47,
    LOGIC_ARGS_NODE = 48,
    LOGIC_IDENTIFIER_NODE = 49,
    LOGIC_TABLE_NODE= 50,
    LOGIC_CHECK_NODE = 51,
    LOGIC_UNIFY_NODE= 52,
    LOGIC_FUNCTION_CALL_NODE = 53,
    LOGIC_ASSIGN_NODE = 54,
    REPEAT_LOOP_NODE = 55,
    TABLE_CONSTRUCTOR_NODE = 56,
    NAME_ASSIGNMENT_NODE = 57,
    FIELD_LIST_NODE = 58,
    EXP_WRAPPER_NODE = 59,
    ABSTRACT_METHOD_NODE = 60,
    FUNC_BODY_NODE = 61,
    CAST_NODE = 62,
    BINARY_OPERATOR_OVERLOAD_NODE = 63,
    UNARY_OPERATOR_OVERLOAD_NODE = 64,
    REQUIRE_NODE = 65,
    RETURN_NODE = 66,
    DEFAULT_SET_NODE = 67,
    DEFAULT_PLACEHOLDER_NODE = 68,
    CAST_CHECK_NODE = 69,
    LOGIC_ALIAS_NODE = 70,
    LOGIC_PREDICATE_NODE = 71,
    UNOP_EXP_NODE = 72
}

return Tokens;